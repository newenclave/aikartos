#pragma once

#include "aikartos/kernel/core.hpp"
#include "aikartos/sch/events.hpp"
#include "aikartos/sch/waiting_tasks_queue.hpp"
#include "aikartos/sync/policies/no_mutex.hpp"
#include "aikartos/tasks/config.hpp"
#include "aikartos/tasks/object.hpp"
#include "aikartos/utils/object_pool.hpp"

namespace aikartos::sch {

	namespace <NAME> {

		enum class config_flags : std::uint32_t {
		};

		template <typename ConfigT, typename TasksEventsType>
		class scheduler {
		public:
			using config = ConfigT;

			constexpr static std::size_t maximum_tasks = config::maximum_tasks;

			using control_block = tasks::control_block;
			using tasks_events_type = TasksEventsType;

			struct scheduler_data_type {};

			using data_object_pool = utils::object_pool<scheduler_data_type, maximum_tasks, 4>;
			using waiting_queue = waiting_tasks_queue<maximum_tasks, sync::policies::no_mutex>;

			void configure_task(control_block *task, const tasks::config &) {
				task->scheduler_data = static_cast<void *>(data_pool_.alloc());
			}

			void clear_task(control_block *task) {
				data_pool_.free(get_data(task));
			}

			control_block* get_next_task() {
				process_waiting_queue();
				return nullptr;
			}

			void add_task(control_block *task) {
			}

		private:

			void process_waiting_queue() {
				waiting_tasks_.process([this](auto *task) {
				});
			}

			waiting_queue waiting_tasks_;
			data_object_pool data_pool_;
		};

	} 
} 
